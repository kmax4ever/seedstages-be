/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ReDAOSeedStageFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProject"
      | "createReDAOSeedStage"
      | "getSeedStages"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProjectCreated"
      | "SeedStageCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createReDAOSeedStage",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeedStages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReDAOSeedStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeedStages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectName: string,
    projectCode: string,
    projectId: BigNumberish
  ];
  export type OutputTuple = [
    projectName: string,
    projectCode: string,
    projectId: bigint
  ];
  export interface OutputObject {
    projectName: string;
    projectCode: string;
    projectId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeedStageCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    seedStageAddress: AddressLike,
    multiSigAddress: AddressLike,
    iouToken: AddressLike,
    depositToken: AddressLike
  ];
  export type OutputTuple = [
    projectId: bigint,
    seedStageAddress: string,
    multiSigAddress: string,
    iouToken: string,
    depositToken: string
  ];
  export interface OutputObject {
    projectId: bigint;
    seedStageAddress: string;
    multiSigAddress: string;
    iouToken: string;
    depositToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReDAOSeedStageFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ReDAOSeedStageFactory;
  waitForDeployment(): Promise<this>;

  interface: ReDAOSeedStageFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProject: TypedContractMethod<
    [_projectName: string, _projectCode: string],
    [string],
    "nonpayable"
  >;

  createReDAOSeedStage: TypedContractMethod<
    [
      _projectId: BigNumberish,
      multiSigAddress: AddressLike,
      _iouTokenAddress: AddressLike,
      _depositTokenAddress: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  getSeedStages: TypedContractMethod<
    [projectId: BigNumberish],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [_projectName: string, _projectCode: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createReDAOSeedStage"
  ): TypedContractMethod<
    [
      _projectId: BigNumberish,
      multiSigAddress: AddressLike,
      _iouTokenAddress: AddressLike,
      _depositTokenAddress: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSeedStages"
  ): TypedContractMethod<[projectId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SeedStageCreated"
  ): TypedContractEvent<
    SeedStageCreatedEvent.InputTuple,
    SeedStageCreatedEvent.OutputTuple,
    SeedStageCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectCreated(string,string,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "SeedStageCreated(uint256,address,address,address,address)": TypedContractEvent<
      SeedStageCreatedEvent.InputTuple,
      SeedStageCreatedEvent.OutputTuple,
      SeedStageCreatedEvent.OutputObject
    >;
    SeedStageCreated: TypedContractEvent<
      SeedStageCreatedEvent.InputTuple,
      SeedStageCreatedEvent.OutputTuple,
      SeedStageCreatedEvent.OutputObject
    >;
  };
}
