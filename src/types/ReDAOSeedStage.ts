/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReDAOSeedStage {
  export type RoundStruct = {
    roundId: BigNumberish;
    isWhitelistRound: boolean;
    allocation: BigNumberish;
    minAllocationPerAddress: BigNumberish;
    maxAllocationPerAddress: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    raisedAmount: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type RoundStructOutput = [
    roundId: bigint,
    isWhitelistRound: boolean,
    allocation: bigint,
    minAllocationPerAddress: bigint,
    maxAllocationPerAddress: bigint,
    startTime: bigint,
    endTime: bigint,
    raisedAmount: bigint,
    merkleRoot: string
  ] & {
    roundId: bigint;
    isWhitelistRound: boolean;
    allocation: bigint;
    minAllocationPerAddress: bigint;
    maxAllocationPerAddress: bigint;
    startTime: bigint;
    endTime: bigint;
    raisedAmount: bigint;
    merkleRoot: string;
  };
}

export interface ReDAOSeedStageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "depositTokenAddress"
      | "getRoundDetails"
      | "iouTokenAddress"
      | "isInitialized"
      | "isRoundActive"
      | "multiSigAddress"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "roundCount"
      | "rounds"
      | "setDepositTokenAddress"
      | "setIouTokenAddress"
      | "setRoundDetails"
      | "transferOwnership"
      | "unpause"
      | "userDeposits"
      | "verifyDeposit"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "RoundCreated"
      | "Unpaused"
      | "UpdateDepositToken"
      | "UpdateIouToken"
      | "UserDeposited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "iouTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRoundActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIouTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundDetails",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDeposit",
    values: [AddressLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iouTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoundActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIouTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundCreatedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    isWhitelistRound: boolean,
    allocation: BigNumberish,
    minAllocationPerAddress: BigNumberish,
    maxAllocationPerAddress: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    raisedAmount: BigNumberish,
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [
    roundId: bigint,
    isWhitelistRound: boolean,
    allocation: bigint,
    minAllocationPerAddress: bigint,
    maxAllocationPerAddress: bigint,
    startTime: bigint,
    endTime: bigint,
    raisedAmount: bigint,
    merkleRoot: string
  ];
  export interface OutputObject {
    roundId: bigint;
    isWhitelistRound: boolean;
    allocation: bigint;
    minAllocationPerAddress: bigint;
    maxAllocationPerAddress: bigint;
    startTime: bigint;
    endTime: bigint;
    raisedAmount: bigint;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateDepositTokenEvent {
  export type InputTuple = [depositToken: AddressLike];
  export type OutputTuple = [depositToken: string];
  export interface OutputObject {
    depositToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateIouTokenEvent {
  export type InputTuple = [iouToken: AddressLike];
  export type OutputTuple = [iouToken: string];
  export interface OutputObject {
    iouToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserDepositedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    roundId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReDAOSeedStage extends BaseContract {
  connect(runner?: ContractRunner | null): ReDAOSeedStage;
  waitForDeployment(): Promise<this>;

  interface: ReDAOSeedStageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [roundId: BigNumberish, amount: BigNumberish, merkleProof: BytesLike[]],
    [void],
    "payable"
  >;

  depositTokenAddress: TypedContractMethod<[], [string], "view">;

  getRoundDetails: TypedContractMethod<
    [_roundId: BigNumberish],
    [ReDAOSeedStage.RoundStructOutput],
    "view"
  >;

  iouTokenAddress: TypedContractMethod<[], [string], "view">;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  isRoundActive: TypedContractMethod<
    [roundIndex: BigNumberish],
    [boolean],
    "view"
  >;

  multiSigAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roundCount: TypedContractMethod<[], [bigint], "view">;

  rounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        roundId: bigint;
        isWhitelistRound: boolean;
        allocation: bigint;
        minAllocationPerAddress: bigint;
        maxAllocationPerAddress: bigint;
        startTime: bigint;
        endTime: bigint;
        raisedAmount: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;

  setDepositTokenAddress: TypedContractMethod<
    [newDepositTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setIouTokenAddress: TypedContractMethod<
    [newIouTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoundDetails: TypedContractMethod<
    [
      _isWhitelistRound: boolean,
      _allocation: BigNumberish,
      _minAllocationPerAddress: BigNumberish,
      _maxAllocationPerAddress: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userDeposits: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  verifyDeposit: TypedContractMethod<
    [user: AddressLike, merkleProof: BytesLike[], merkleRoot: BytesLike],
    [boolean],
    "view"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [roundId: BigNumberish, amount: BigNumberish, merkleProof: BytesLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoundDetails"
  ): TypedContractMethod<
    [_roundId: BigNumberish],
    [ReDAOSeedStage.RoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "iouTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRoundActive"
  ): TypedContractMethod<[roundIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "multiSigAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roundCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        roundId: bigint;
        isWhitelistRound: boolean;
        allocation: bigint;
        minAllocationPerAddress: bigint;
        maxAllocationPerAddress: bigint;
        startTime: bigint;
        endTime: bigint;
        raisedAmount: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDepositTokenAddress"
  ): TypedContractMethod<
    [newDepositTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIouTokenAddress"
  ): TypedContractMethod<
    [newIouTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoundDetails"
  ): TypedContractMethod<
    [
      _isWhitelistRound: boolean,
      _allocation: BigNumberish,
      _minAllocationPerAddress: BigNumberish,
      _maxAllocationPerAddress: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userDeposits"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyDeposit"
  ): TypedContractMethod<
    [user: AddressLike, merkleProof: BytesLike[], merkleRoot: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoundCreated"
  ): TypedContractEvent<
    RoundCreatedEvent.InputTuple,
    RoundCreatedEvent.OutputTuple,
    RoundCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateDepositToken"
  ): TypedContractEvent<
    UpdateDepositTokenEvent.InputTuple,
    UpdateDepositTokenEvent.OutputTuple,
    UpdateDepositTokenEvent.OutputObject
  >;
  getEvent(
    key: "UpdateIouToken"
  ): TypedContractEvent<
    UpdateIouTokenEvent.InputTuple,
    UpdateIouTokenEvent.OutputTuple,
    UpdateIouTokenEvent.OutputObject
  >;
  getEvent(
    key: "UserDeposited"
  ): TypedContractEvent<
    UserDepositedEvent.InputTuple,
    UserDepositedEvent.OutputTuple,
    UserDepositedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoundCreated(uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,bytes32)": TypedContractEvent<
      RoundCreatedEvent.InputTuple,
      RoundCreatedEvent.OutputTuple,
      RoundCreatedEvent.OutputObject
    >;
    RoundCreated: TypedContractEvent<
      RoundCreatedEvent.InputTuple,
      RoundCreatedEvent.OutputTuple,
      RoundCreatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdateDepositToken(address)": TypedContractEvent<
      UpdateDepositTokenEvent.InputTuple,
      UpdateDepositTokenEvent.OutputTuple,
      UpdateDepositTokenEvent.OutputObject
    >;
    UpdateDepositToken: TypedContractEvent<
      UpdateDepositTokenEvent.InputTuple,
      UpdateDepositTokenEvent.OutputTuple,
      UpdateDepositTokenEvent.OutputObject
    >;

    "UpdateIouToken(address)": TypedContractEvent<
      UpdateIouTokenEvent.InputTuple,
      UpdateIouTokenEvent.OutputTuple,
      UpdateIouTokenEvent.OutputObject
    >;
    UpdateIouToken: TypedContractEvent<
      UpdateIouTokenEvent.InputTuple,
      UpdateIouTokenEvent.OutputTuple,
      UpdateIouTokenEvent.OutputObject
    >;

    "UserDeposited(uint256,address,uint256)": TypedContractEvent<
      UserDepositedEvent.InputTuple,
      UserDepositedEvent.OutputTuple,
      UserDepositedEvent.OutputObject
    >;
    UserDeposited: TypedContractEvent<
      UserDepositedEvent.InputTuple,
      UserDepositedEvent.OutputTuple,
      UserDepositedEvent.OutputObject
    >;
  };
}
